name: Build Production Packages

on:
    push:
        paths-ignore:
            - '.github/**'
            - 'compose.yaml'
            - 'LICENSE.md'
            - 'README.md'
            - 'dd-server/tests/**'
        branches:
        - main

env:
    SERVER_CONFIG: "\"\n\n@app.route('/')\ndef home():\n\treturn send_from_directory(app.static_folder, 'index.html')\n\n@app.route('/assets/<path:filename>')\ndef send_assets(filename):\n\treturn send_from_directory(app.static_folder+'/assets', filename)\""
    REGISTRY: docker.io
    IMAGE_NAME: zekissel/dd-server

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout main
          uses: actions/checkout@v2

        - name: Setup Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '21.x'

        - name: Cache dependencies
          uses: actions/cache@v2
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
                ${{ runner.os }}-node-
    

        - name: Install dependencies and build dist
          working-directory: ./dd-client
          run: |
            npm ci
            npm run build

        - name: Upload distribution aritfacts (client)
          uses: actions/upload-artifact@v2
          with:
            name: client-dist
            path: ./dd-client/dist
        - name: Upload distribution aritfacts (server)
          uses: actions/upload-artifact@v2
          with:
            name: server-dist
            path: ./dd-server/*.py

        - name: Checkout prod branch
          uses: actions/checkout@v2
          with:
            ref: prod

        - name: Download distribution artifacts (client)
          uses: actions/download-artifact@v2
          with:
            name: client-dist
            path: ./dd-server
        - name: Download distribution artifacts (server)
          uses: actions/download-artifact@v2
          with:
            name: server-dist
            path: ./dd-server

        - name: Commit client and server builds to production branch
          working-directory: ./
          env:
            GITHUB_TOKEN: ${{ github.token }}
          run: |
            mkdir -p ./dd-server/dist/assets
            mv ./dd-server/index.html ./dd-server/dist/
            mv ./dd-server/assets/*.css ./dd-server/dist/assets/main.css
            mv ./dd-server/assets/*.js ./dd-server/dist/assets/main.js
            sed -i 's@"/assets/index.*css"@"/assets/main.css"@' ./dd-server/dist/index.html
            export INTEGRITY=$(cat ./dd-server/dist/assets/main.js | openssl dgst -sha384 -binary | openssl enc -base64 -A)
            sed -i "s@/assets/index.*js\"@/assets/main.js\" integrity=\"sha384-$INTEGRITY\"@" ./dd-server/dist/index.html

            sed -i 's@dbase@0.0.0.0@' ./dd-server/schema.py
            sed -i "s@__name__@__name__, static_folder='dist'@" ./dd-server/server.py
            sed -i 's@http://localhost:8080@*@' ./dd-server/server.py
            echo ${{ env.SERVER_CONFIG }} >> ./dd-server/server.py

            git config --global user.email "dd-github-action"
            git config --global user.name "github-actions@github.com"
            git add ./dd-server/dist/*
            git add ./dd-server/*.py
            git diff-index --quiet HEAD || git commit -am "Auto compile client and configure server"
            git push origin prod

    containerize:

      runs-on: ubuntu-latest
      needs: build
      permissions:
        contents: read
        packages: write
        id-token: write
  
      steps:
        # Install the cosign tool
        # https://github.com/sigstore/cosign-installer
        - name: Install cosign
          uses: sigstore/cosign-installer@v3.1.1
          with:
            cosign-release: 'v2.1.1'
  
        # Set up BuildKit Docker container builder to be able to build
        # multi-platform images and export cache
        # https://github.com/docker/setup-buildx-action
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3.0.0
  
        # Login against a Docker registry
        # https://github.com/docker/login-action
        - name: Log into docker.io
          uses: docker/login-action@v3.0.0
          with:
            username: zekissel
            password: ${{ secrets.DOCKERHUB_TOKEN }}
  
        # Extract metadata (tags, labels) for Docker
        # https://github.com/docker/metadata-action
        - name: Extract Docker metadata
          id: meta
          uses: docker/metadata-action@v5.0.0
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  
        # Build and push Docker image with Buildx
        # https://github.com/docker/build-push-action
        - name: Build and push Docker image
          id: build-and-push
          uses: docker/build-push-action@v5.0.0
          with:
            context: "https://github.com/zekissel/doodle-diction.git#prod:dd-server"
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
  
        # Sign the resulting Docker image digest
        # This will only write to the public Rekor transparency log when the Docker
        # repository is public to avoid leaking data.
        # https://github.com/sigstore/cosign
        - name: Sign the published Docker image
          env:
            # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
            TAGS: ${{ steps.meta.outputs.tags }}
            DIGEST: ${{ steps.build-and-push.outputs.digest }}
          # This step uses the identity token to provision an ephemeral certificate
          # against the sigstore community Fulcio instance.
          run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}